<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.ssafit.model.dao.CoachDao">

	<resultMap type="CoachDto" id="coachDtoMap">
		<result column="coach_seq" property="coachSeq" />
		<result column="coach_id" property="coachId" />
		<result column="coach_password" property="coachPassword" />
		<result column="coach_name" property="coachName" />
		<result column="coach_email" property="coachEmail" />
		<result column="coach_birth" property="coachBirth" />
		<result column="coach_address" property="coachAddress" />
		<result column="coach_nickname" property="coachNickname" />
		<result column="coach_gender" property="coachGender" />
		<result column="coach_profile_img_url"
			property="coachProfileImgUrl" />
		<result column="created_at" property="coachCreatedAt" />
		<result column="updated_at" property="coachUpdatedAt" />
	</resultMap>

	<resultMap type="UserDto" id="userDtoMap">
		<result column="user_seq" property="userSeq" />
		<result column="user_id" property="userId" />
		<result column="user_password" property="userPassword" />
		<result column="user_name" property="userName" />
		<result column="user_email" property="userEmail" />
		<result column="user_birth" property="userBirth" />
		<result column="user_address" property="userAddress" />
		<result column="user_nickname" property="userNickname" />
		<result column="user_gender" property="userGender" />
		<result column="created_at" property="userCreatedAt" />
		<result column="updated_at" property="userUpdatedAt" />
	</resultMap>

	<!-- public int insertCoach(CoachDto coachDto); -->
	<insert id="insertCoach" parameterType="coachDto">
		insert into
		coach(coach_id, coach_password, coach_name, coach_email, coach_birth,
		coach_address, coach_nickname, coach_gender, coach_profile_img_url)
		values (#{coachId}, #{coachPassword, }, #{coachName}, #{coachEmail},
		#{coachBirth}, #{coachAddress}, #{coachNickname}, #{coachGender},
		#{coachProfileImgUrl})
	</insert>

	<!-- public CoachDto selectCoachByCoachId(String id); -->
	<select id="selectCoachByCoachId" parameterType="String"
		resultMap="coachDtoMap">
		select *
		from coach
		where coach_id=#{coachId} AND is_valid !=
		0
	</select>

	<!-- public CoachDto selectCoach(int coachSeq); -->
	<select id="selectCoach" parameterType="int"
		resultMap="coachDtoMap">
		select *
		from coach
		where coach_seq=#{coachSeq}
	</select>

	<!-- public int deleteCoach(int coachSeq); -->
	<update id="deleteCoach" parameterType="int">
		update coach
		set
		is_valid=0
		where coach_seq=#{coachSeq}
	</update>

	<!-- public int updateCoach(CoachDto coachDto); -->
	<update id="updateCoach" parameterType="CoachDto">
		update coach
		set
		coach_name=#{coachName}, coach_email=#{coachEmail},
		coach_birth=#{coachBirth}, coach_address=#{coachAddress},
		coach_nickname=#{coachNickname}, coach_gender=#{coachGender},
		coach_profile_img_url=#{coachProfileImgUrl}
	</update>

	<!-- public Page<UserDto> selectManageUser(int coachSeq); -->
	<select id="selectManageUser" parameterType="int" resultMap="userDtoMap">
		select *
		from user u
		join coach_user cu on cu.user_seq = u.user_seq
		where cu.coach_seq=#{coachSeq}
	</select>
	
	<!-- public int selectMinMatchedCoach(String userType); -->
	<select id="selectMinMatchedCoach" parameterType="String" resultType="int">
		select count(*), coach_seq
		from coach_user 
		group by coach_seq
		having coach_seq IN ( select coach_seq
							from coach_super_type c join workout_super_type w
							on c.workout_super_type_seq = w.workout_super_type_seq
							where w.workout_super_type_type='스트레칭')
		order by count(*)
		limit 1
	</select>
	
	<!-- public void insertUserCoachMatching(HashMap<String, Integer> param); -->
	<update id="insertUserCoachMatching" parameterType="hashmap">
		insert into coach_user(coach_seq, user_seq)
		values (#{coachSeq}, #{userSeq})
	</update>

</mapper>
